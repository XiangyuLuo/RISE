library(Seurat)
library(dplyr)

setwd("~/Desktop/PhD/SAVER/RISEST")

find_neighbors <- function(spatial, thresh= 0.2){
  xmin <- min(spatial[,1])
  xmax <- max(spatial[,1])
  ymin <- min(spatial[,2])
  ymax <- max(spatial[,2])
  spatial[,'x'] <- (spatial[,1] - xmin)/(xmax - xmin)
  spatial[,'y'] <- (spatial[,2] - ymin)/(ymax - ymin)
  n <- nrow(spatial)
  neighbors <- matrix(nrow = n,ncol = n)
  rownames(neighbors) <- colnames(neighbors) <- rownames(spatial)
  for (i in c(1:n)){
    neighbors[,i] <- (abs(spatial[,'x'] - spatial[i,'x']) < thresh) & (abs(spatial[,'y'] - spatial[i,'y']) < thresh)
  }
  diag(neighbors) <- FALSE
  return(neighbors)
}
# Sample ID
sample_IDs <- c(151507:151510,151669:151676)
sample <- sample_IDs[8]

# Spot Label 
ground_truth <- read.csv(paste0('Dataset/',sample,'/cluster_labels.csv'),header = TRUE)
ground_truth <- ground_truth[!is.na(ground_truth[,'ground_truth']),]
rownames(ground_truth) <- lapply(ground_truth[,'key'],function(y) sub("^.*?_", "",y))
spots <- rownames(ground_truth)
K <- length(unique(ground_truth$ground_truth))

# Spot Position
position_path <- paste0('Dataset/', sample, '/tissue_positions_list.csv')
spot_position <- read.csv(position_path, header = FALSE)
rownames(spot_position) <- spot_position[,1]
spot_position <- spot_position[,-1]
spot_position <- spot_position[match(spots,rownames(spot_position)),]
colnames(spot_position) <- c('1','2','3',"X",'Y')
spot_position <- spot_position[,c("X","Y")]

# Spot Gene Expression
express_path <- paste0('Dataset/', sample, '/', sample, '_filtered_feature_bc_matrix.h5')
spot_express <- as.data.frame(Seurat::Read10X_h5(express_path))
spot_express <- spot_express[, spots]
genes <- rownames(spot_express)
length(genes)
dim(spot_express)

sparsity <- apply(spot_express, 2, function(x) sum(as.numeric(x==0))/length(x))
sparsity_imputed <- apply(spot_imputed, 2, function(x) sum(as.numeric(x==0))/length(x))
summary(sparisty_imputed)
dim(spot_express)
hist(sparisty_imputed, breaks = 100)

# for (sample in sample_IDs){
#   if (!dir.exists(paste0("Sprod_imputed/Only_input/",sample,"/input"))){
#     dir.create(paste0("Sprod_imputed/Only_input/",sample,"/input"), recursive = TRUE)
#     dir.create(paste0("Sprod_imputed/Only_input/",sample,"/output"), recursive = TRUE)
#   }
# }


s <- t(spot_express)
write.table(s, file = paste0('Sprod_imputed/Only_input/',sample,'/input/Counts.txt'),row.names = T, col.names = T, sep = '\t', quote = FALSE)

ss <- read.table('/Users/christine/SPROD/processed_151673/Counts.txt')
# pp <- read.csv('/Users/christine/SPROD/processed_151673/Spot_metadata.csv')
write.csv(spot_position, file = paste0("Sprod_imputed/Only_input/",sample,"/input/Spot_metadata.csv"),row.names = T)


# Quality Control
# spot_express <- spot_express[rowSums(spot_express) > 10,]

# Spatial Imputation
neigh_mat <- find_neighbors(spot_position, 0.05)
pred_express <- as.data.frame(spot_express)
pred_express[] <- NA

# neighbors genes as predictor
# 1. norm-log2-lm
normalized_log2_express <- log2(t(t(spot_express)/colSums(spot_express) * median(colSums(spot_express))) + 1)
# normalized_log2_express <- log2(t(t(spot_express)/colSums(spot_express) * mean(colSums(spot_express))) + 1)
# for(spot in seq_along(spots)){
#   # X <- design.matrix(normalized_express, neigh_mat, spot)
#   X <- as.data.frame(normalized_log2_express[, neigh_mat[spot, ]])
#   y <- normalized_log2_express[, spot]
#   model <- lm(y ~ ., data = X)
#   pred_y <- predict.lm(model, X)
#   pred_express[, spot] <- pred_y
#   print(spot)
# }

time_record <- c()
for(i in seq(20)){
  start_time <- Sys.time()
  for(spot in seq(ncol(spot_express))){
    # X <- design.matrix(normalized_express, neigh_mat, spot)
    X <- as.data.frame(normalized_log2_express[, neigh_mat[spot, ]])
    y <- normalized_log2_express[, spot]
    model <- lm(y ~ ., data = X)
    pred_y <- predict.lm(model, X)
    pred_express[, spot] <- pred_y
    # print(spot)
  }
  end_time <- Sys.time()
  total_time <- as.numeric(end_time - start_time, units = 'mins')
  # print(paste0("The ",i," time of sample ",sample,": ",total_time,"mins."))
  print(total_time)
  time_record <- append(time_record, total_time)
  saveRDS(time_record, "RunTime_RISE.rds")
  # saveRDS(time_record,paste0("RISE/Run_Time/RISE/RunTime_",sample,'.rds'))
  # if ( i == 1){
  #   spatial_imputed <- pred_express
  #   spatial_imputed[spot_express != 0] <- normalized_log2_express[spot_express != 0]
  #   ARI_spatial <- c()
  #   for(i in c(1:50)){
  #     spatial_imputed_result <- kmeans(t(spatial_imputed), K)
  #     ARI<- mclust::adjustedRandIndex(ground_truth[,'ground_truth'], spatial_imputed_result$cluster)
  #     print(ARI)
  #     ARI_spatial <- c(ARI_spatial, ARI)
  #   } 
  # }
}


## RISEST

ARI_spatial_K <- mean(ARI_spatial)

# SAVER
time_record <- c()
for (i in seq(10)){
  start_time <- Sys.time()
  saver_imputed <- SAVER::saver(spot_express, ncores = 7, estimates.only = T)
  end_time <- Sys.time()
  total_time <- as.numeric(end_time - start_time, units = 'mins')
  print(total_time)
  time_record <- append(time_record, total_time)
}
write.csv(saver_imputed,file = paste0("SAVER_Imputed/SAVER_",sample,".csv"))
saveRDS(time_record,file = paste0("SAVER_Imputed/RunTime_",sample,".rds"))
ARI_saver <- c()
for(i in c(1:10)){
  saver_imputed_result <- kmeans(t(saver_imputed), K)
  ARI_saver_K <- mclust::adjustedRandIndex(ground_truth[,'ground_truth'],saver_imputed_result$cluster)
  print(ARI_saver_K)
  ARI_saver <- c(ARI_saver, ARI_saver_K)
}
write.csv(ARI_saver, file = paste0("SAVER_Imputed/ARI_",sample,".csv"))


# K-Means SAVER Imputation
detach("package:SAVER", unload = TRUE)

source('/Users/christine/Desktop/PhD/SAVER/Spatial_SAVER/R/calc_maxcor.R')
source('/Users/christine/Desktop/PhD/SAVER/Spatial_SAVER/R/calc_posterior.R')
source('/Users/christine/Desktop/PhD/SAVER/Spatial_SAVER/R/expr_predict.R')
source('/Users/christine/Desktop/PhD/SAVER/Spatial_SAVER/R/utils.R')
source("/Users/christine/Desktop/PhD/SAVER/Spatial_SAVER/R/optimize_variance.R")
source("/Users/christine/Desktop/PhD/SAVER/Spatial_SAVER/R/calc_loglik.R")
source("/Users/christine/Desktop/PhD/SAVER/Spatial_SAVER/Try_Spatial/neighbor_find.R")
source('/Users/christine/Desktop/PhD/SAVER/Spatial_SAVER/R/calc_estimate_KNN.R')
source("/Users/christine/Desktop/PhD/SAVER/Spatial_SAVER/R/saver_fit.R")
source("/Users/christine/Desktop/PhD/SAVER/Spatial_SAVER/R/saver.R")
source("/Users/christine/Desktop/PhD/SAVER/Spatial_SAVER/R/combine_saver.R")
source("/Users/christine/Desktop/PhD/SAVER/Spatial_SAVER/R/cor_adjust.R")
source("/Users/christine/Desktop/PhD/SAVER/Spatial_SAVER/R/get_mu.R")
source("/Users/christine/Desktop/PhD/SAVER/Spatial_SAVER/R/sample_saver.R")

saver_kmeans <- saver(spot_express, spatial, 50, ncores = 7,estimates.only = T)
# imputed_151673 <- saver_151673[, spots]
saver_kmeans <- kmeans(t(imputed_kmeans), K)
ARI_Kmeans_saver <- mclust::adjustedRandIndex(ground_truth[,'ground_truth'], saver_kmeans$cluster)

# scImpute
counts <- read.table(paste0("Sprod_imputed/Only_input/",sample,"/input/Counts.txt"))
write.csv(counts,paste0("Sprod_imputed/Only_input/",sample,"/input/Counts.csv"))
scImpute <- scImpute::scimpute(count_path = paste0("Sprod_imputed/Only_input/",sample,"/input/Counts.csv"),
                               out_dir = paste0("scImpute_imputed/",sample,"/"),
                               Kcluster = K)

# original data K Means
## Normalized data
Origin_ARI <- c()
for (i in seq(50)){
  original_result <- kmeans(t(normalized_log2_express), K) 
  ARI <- mclust::adjustedRandIndex(ground_truth[,'ground_truth'], original_result$cluster)
  print(ARI)
  Origin_ARI <- append(Origin_ARI,ARI)
}

## Count data
count_origin <- kmeans(t(spot_express), K)
ARI_origin_Kc <- mclust::adjustedRandIndex(ground_truth[,'ground_truth'], count_origin$cluster)


# Sprod Imputed
sprod <- read.csv(paste0('/Users/christine/SPROD/Imputed_Data/',sample,'/output/sprod_Denoised_matrix.txt'),sep = '\t')
Sprod_ARI <- c()
for (i in seq(50)){
  Kmeans_sprod <- kmeans(sprod, K)
  ARI <- mclust::adjustedRandIndex(ground_truth[,'ground_truth'], Kmeans_sprod$cluster)
  print(ARI)
  Sprod_ARI <- append(Sprod_ARI, ARI)
}
# SEDR Imputed
SEDR <- read.csv(paste0("SEDR_Imputed/",sample,"_SEDR_imputed.csv"),row.names = 1)
SEDR_ARI <- c()
for (i in seq(50)){
  Kmeans_SEDR <- kmeans(SEDR, K)
  ARI <- mclust::adjustedRandIndex(ground_truth[,'ground_truth'], Kmeans_SEDR$cluster)
  print(ARI)
  SEDR_ARI <- append(SEDR_ARI, ARI)
}

LinRegImput <- readRDS(paste0("RunTimeRecords/Record_",sample,".rds"))
ARI_record <- data.frame(origin = Origin_ARI, Sprod = Sprod_ARI
                         ,SEDR = SEDR_ARI, LinReg = LinRegImput$ARI)
saveRDS(ARI_record,file = paste0('Outputs/',sample,'_ARI.rds'))

# saveRDS(record, file = paste0("RunTimeRecords/Record_",sample,".rds"))
ARI_record <- readRDS(paste0('Outputs/',"151674",'_ARI.rds'))
# VlnPlot
library(tidyr)
df_long <- ARI_record %>%
  pivot_longer(cols = everything(), names_to = "Variable", values_to = "Value")

# Run Time Comparison
sample_IDs <- c(151669:151676)
sample_ID <- sample_IDs[8]
# load(paste0("RunTimeRecords/LinReg_RunTime/Record_",sample_ID))
LinReg_time <- read_rds(paste0("RunTimeRecords/LinReg_RunTime/Record_",sample_ID,".rds"))
Sprod_time <- read.table(paste0("RunTimeRecords/Sprod_RunTime/time_log_",sample_ID,".txt"), sep = ",",header = T)
# saveRDS(record,file = paste0("RunTimeRecords/LinReg_RunTime/Record_",sample_ID,".rds"))
# rm(record)
RunTime_recod <- data.frame(LinReg = LinReg_time$time_record, Sprod = Sprod_time$Elapsed.Time..minutes.)
saveRDS(RunTime_recod,paste0("Outputs/Run_Time/",sample_ID,"_runtime.rds"))
df_long <- RunTime_recod %>%
  pivot_longer(cols = everything(), names_to = "Variable", values_to = "Value")


# 绘制小提琴图
ggplot(df_long, aes(x = Variable, y = Value, fill = Variable)) +
  geom_violin(trim = FALSE, width = 1, scale = "width") +
  scale_fill_brewer(palette = "Set1") +  # 使用ColorBrewer调色板
  theme_minimal() +
  # labs(title = "ARI of Four Imputation Methods", x = "Variables", y = "Values") +
  labs(title = "Run Time of Two Imputation Methods", x = "Methods", y = "Run Time") +
  ylim(0, 25)
